{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 385, 195, MM, 1)\nhdrive = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nendgame_motor = Motor(Ports.PORT6, GearSetting.RATIO_36_1, False)\nroller_motor = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ndef autonomous():\n    endgame_motor.set_stopping(BRAKE)\n    roller_motor.set_velocity(80,PERCENT)\n    endgame_motor.spin_for(REVERSE,360,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE, 30, MM,wait=True)\n    wait(1, SECONDS)\n\n    \n    roller_motor.spin_for(FORWARD,40,DEGREES)\n    wait(1, SECONDS)\n\n    drivetrain.drive_for(FORWARD,80,MM,wait=True)\n\n    sagaDon()\n    wait(0.5,SECONDS)\n    drivetrain.drive_for(FORWARD,1900,MM)\n\n\n\n\ndef driver_control():\n    \n    endgame_motor.set_stopping(BRAKE)\n    hdrive.set_velocity(120,RPM)\n    endgame_motor.set_velocity(100,PERCENT)\n    roller_motor.set_velocity(50,PERCENT)\n    while True:\n\n        if controller_1.buttonL1.pressing():\n            hdrive.spin(FORWARD)\n        elif controller_1.buttonR1.pressing():\n            hdrive.spin(REVERSE)\n        else:\n            hdrive.stop()\n\n        if controller_1.buttonX.pressing():\n            endgame_motor.spin(FORWARD)\n        elif controller_1.buttonB.pressing():\n            endgame_motor.spin(REVERSE)\n        else:\n            endgame_motor.stop()\n\n        if controller_1.buttonR2.pressing():\n            roller_motor.spin(FORWARD)\n        elif controller_1.buttonL2.pressing():\n            roller_motor.spin(REVERSE)\n        else:\n            roller_motor.stop()\n    \n\n\ndef solaDon():\n    left_drive_smart.spin_for(REVERSE,290,DEGREES,wait=False)\n    right_drive_smart.spin_for(FORWARD,290,DEGREES)\n\ndef sagaDon():\n    left_drive_smart.spin_for(FORWARD,290,DEGREES,wait=False)\n    right_drive_smart.spin_for(REVERSE,290,DEGREES)\ncompetition = Competition(driver_control, autonomous)\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[3,4,1,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"385","unit":"mm","wheelbase":"195","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"hdrive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"ileri","rev":"geri","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[6],"name":"endgame_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"ileri","rev":"geri","gear":"ratio36_1"},"triportSourcePort":22},{"port":[7],"name":"roller_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"ileri","rev":"geri","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}